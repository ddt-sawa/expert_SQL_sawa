/*演習5-3 完全外部結合とMERGE文
「完全外部結合」のところで、「完全外部結合は情報を欠落させないという点で
MERGE文によく似ている」と述べました。ここでは、そのMERGE文について練習して
置きましょう。MERGE文は、SQL:2003で標準化された非常に新しい機能ですが、
二つのテーブルの情報を一か所にまとめることができるため、入力元のデータソースが
複数に分散していて、それを1つのテーブルに纏めたい場合などに大きな威力を発揮します。
 ここでは、本文でも使ったClass_A,Class_Bのテーブルを再び使いましょう。
 (Bクラスのデータを少し変えています)
 
 CLASS_A
   id  |  name
-------+--------
 1     | 田中
 2     | 鈴木
 3     | 伊集院
 
 CLASS_B
   id  |  name
-------+--------
 1     | 田中
 2     | 内海
 4     | 西園寺
 
 いま、CLASS_BのデータをCLASS_Aへマージすることにします。
すると、求める結果は次のようになります。

出力
  id   |  name
-------+--------
 1     | 田中
 2     | 内海
 3     | 伊集院
 4     | 西園寺
 
識別子(id)列をキーにClass_Aテーブルを検索して、行があればUPDATE、なければ
INSERTという動作を行います。その結果、たまたま名前が一致した1番の「田中」と、
CLASS_Bに存在しなかった3番の「伊集院」については変更なし、
キーは一致するけど名前は違う2番の「鈴木」は「内海」に更新され、
Class_Aには存在しなかった新顔の西園寺が追加されるわけです。

PostgreSQLにはマージ機能がないようなので、代替のSQL命令を記述します。
*/

--マージ先のテーブル
UPDATE 
	
	--Aクラス
	Class_A
	
--変更する値
SET 

	--Aクラスの名前をBクラスの名前に変更
	name = Class_B.name
	
--参照範囲
FROM

	--Bクラス
	Class_B

--変更条件
WHERE
	
	--両テーブルでIDが競合している
	Class_A.id = Class_B.id
	
	
--マージ機能における更新部分を代替完了
;				
		

--挿入を行う列
INSERT INTO
	
	--Aクラスの
	Class_A
	(
		--ID
		ID,
			
		--名前
		name	
	)

--挿入する値
SELECT
	
	--BクラスのID
	Class_B.ID,
			
	--Bクラスの名前
	Class_B.name
	
--参照範囲	
FROM

	--Bクラス
	Class_B

--変更条件
WHERE
	
	--BクラスのIDがAクラスに存在しない
	 Class_B.ID NOT IN 
	 
	 --AクラスのIDを検索するクエリ
	 (
	 	--取得値
	 	SELECT 
	 
	 		--AクラスのID
			Class_A.ID
		
		--参照範囲
		FROM 
		
			--Aクラス
			Class_A
	)
	
	
--マージ機能における挿入部分を代替完了
;
